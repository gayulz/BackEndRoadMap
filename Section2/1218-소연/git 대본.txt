안녕하세요.
개발자들이 필수적으로 알아야 할 부분이라고 흔히 알려진 
개발의 버전관리를 하기 위해 알아야 할 Git에 대해 발표를 할 이소연입니다. 
V
목차입니다.
소프트웨어 버전관리의 중요성에 대해 알아보고,
Git이란 무엇이고, Git이 하는 일은 무엇이며
또한 GitHub란 어떤 것이고, 그 GitHub가 하는 기능을 알아보도록 하겠습니다.
V
먼저, 소프트웨어 버전관리 입니다.
V
소프트웨어 버전관리 란 
소프트웨어 개발 과정에서 변경사항을 추적하고 버전을 관리해주어 
프로젝트의 사본을 생성하고, 보존하며 복원을 도와주는 도구입니다.
버전컨트롤시스템이라고 하며 이를 통해 특정 시점의 코드나 파일로 되돌릴 수 있고
협업 시 충돌을 방지하고 효율적인 협업을 도와줍니다.
따라서 버전관리는 첨단 소프트웨어 개발을 위한 필수 도구라고 할 수 있습니다.
V
수업시간에 형상관리라는 말에 대해 들어본 적이 있는데 
버전관리와 형상관리는 유사한 개념으로 사용되지만 약간의 차이점이 있습니다.
버전관리는 소프트웨어의 변화를 추적하고 기록하여, 
여러 버전간의 차이를 관리하는 시스템을 의미하여, 
주로 소스 코드나 파일의 변화를 관리하는데 사용됩니다.
형상관리는 소프트웨어 시스템을 구성하는 요소들의 변경과 구성을 관리하는 프로세스로써, 
소스 코드뿐만 아니라, 문서, 데이터베이스 설정, 빌드 프로세스 등을 포함합니다.
둘의 목적 역시 약간의 차이점이 있는데
버전관리는 코드나 파일의 변경 이력을 관리하여 이전 버전으로 돌아갈 수 있게 해주어 
여러 개발자들 간의 협업을 용이하게 하는데 목적이 있고,
형상관리는 소프트웨어 시스템의 여러 구성 요소간의 의존성을 관리하고, 
변경사항이 시스템 전체에 영향을 미치지 않도록 조절하여 
안정성과 신뢰성을 유지합니다.
V
소프트웨어 버전관리가 필요한 이유로
버전 관리를 통해 개발자들이 코드의 진화과정을 이해할 수 있고, 
어떤 변경으로 인해 버그가 발생하는지 등 추적이 가능하여 이해 용이성을 높여줍니다.
또한 여러 명의 개발자가 동시 작업 시 충돌을 방지하고 
각자의 작업 내용을 효율적으로 통합하여 프로젝트를 진행할 수 있도록 협업 효율화를 해주며,
잘못된 변경사항으로 문제 발생 시 이전의 안정된 상태로 쉽게 복구할 수 있도록 해줍니다.
V
버전관리 시스템은 크게 두가지 유형으로 나뉘는데
중앙 서버에서 버전을 관리하는 중앙 집중식 시스템과
각 개발자들이 로컬에서도 버전을 관리할 수 있는 분산 시스템이 있습니다.
이 두 시스템은 각각의 장단점이 있으며 
프로젝트의 요구사항과 팀의 작업방식에 따라 적합한 시스템을 선택하는 것이 중요합니다.
V
오늘 우리는 현재 대부분의 프로젝트에서 널리 사용하는 분산 버전 관리 시스템인 Git에 대해 알아보겠습니다.
V
Git은 분산 버전관리 시스템으로 
소프트웨어 개발에서 버전 관리를 위해 사용되는 도구입니다.
각 개발자들이 로컬 저장소를 가지고 중앙 서버에 의존하지 않고 
독립적으로 작업할 수 있는 시스템으로 
git은 빠른 속도로 대용량 프로젝트도 효율적으로 관리한다는 장점이 있습니다.
V
많은 사람들이 GIT을 처음 접했을 때 혼란스러워 하는 부분이 
바로 우리가 평소에 사용하던 GUI가 아닌 텍스트 명령어를 통해 프로그램과 상호작용 해야하는 부분일 것 입니다.
터미널 또는 명령 프롬프트를 통해 git명령어를 사용함으로써, 
파일 및 프로젝트의 변경이력을 관리하고, 
협업하는 등 프로젝트 관리의 다양한 기능을 사용할 수 있습니다.
초기에는 cli를 통한 git이용이 익숙하지 않아도 시간이 지나면 매우 효과적이고 강력한 도구로 인식될 수 있습니다.
V
Git을 다루는 주요용어들과 명령어들을 살펴보겠습니다.
첫번째로 리포지토리(저장소) 입니다.
일반적으로 git에서는 네가지 영역으로 구분합니다.
개발자가 파일을 수정하고 작업하는 곳으로,
실제 프로젝트의 파일이 저장되는 workspace 가 있습니다.
이곳에서 파일을 수정하고 변경사항을 기록한 후 “git add”라는 명령어를 통해
변경사항을 일시적으로 저장하는 스테이징 영역으로 파일들을 추가합니다.
Git이 프로젝트의 변경이력을 관리하는 데이터베이스로 사용하는 로컬저장소에 “git commit’을 하면 
스테이징 영역에 있는 변경사항들의 기록이 남겨지고, 
변경사항을 관리하고 히스토리를 조회할 수 있습니다.
로컬 저장소의 변경 사항을 공유하고 백업하기 위해 사용되는 원격 서버에 있는 git 원격저장소가 있습니다.
github가 해당되며 여러 사용자가 함께 작업하고 프로젝트를 공유합니다.
“git push”를 하여 로컬저장소의 커밋기록을 원격 저장소로 전송하고,
“git pull”을 하여 원격 저장소의 변경사항을 로컬로 가져와 원격저장소의 내용을 로컬에 병합하고
“git clone”을 하여 원격저장소의 내용을 로컬로 복제합니다.
V
Git에서 branch란 코드 기록의 특정 지점을 가리키는 포인터로 이해할 수 있습니다.
즉 개발과정에서의 작업 흐름을 관리하고 각각의 작업 단계를 나타냅니다.
이 브랜치를 통해 하나의 프로젝트 내 여러 개의 브랜치를 만들어 별개의 작업이 가능합니다.
“git branch”를 통해 브랜치를 생성하고 
“git checkout”을 통해 다른 브랜치로 전환하여 작업하는 브랜치를 변경할 수 있습니다.
다른 브랜치에서 작업한 내용을 현재 브랜치로 합치기 위해 “git merge”명령어를 이용하여 병합할 수 있습니다.
Branch는 git에서 중요한 요소로, 개발자들이 프로젝트를 보다 체계적으로 관리하고 협업하는데 큰 도움을 줍니다.
V
굳이 복잡한 cli를 통해 명령어를 전달하면서 복잡하게 git을 사용해야할까?
하는 의문이 들 수 있습니다.
하지만 git의 주요기능과 작업 흐름을 보면서 의문을 해소해볼까 합니다.
V
주요기능으로는  파일의 변경이력을 추적하여 관리하는 기능이 있습니다.
파일의 내용을 수정,추가,삭제 등을 기록하고 관리하여 각 파일의 변경 이력을
파악할 수 있습니다.
변경된 파일 중 저장소에 포함하고자 하는 파일을 선택하여 
스테이징 영역에 일시적으로 추가해두고 
commit을 하여 로컬 저장소에 영구적으로 기록할 수 있는 기능을 제공합니다.
각각의 브랜치에서 독립적으로 작업하여 개발작업을 분리할 수 있고,
작업이 완료된 브랜치들은 병합하여 사용할 수 있습니다.
로컬저장소의 변경사항을 원격저장소로 전송하고,
다시 원격저장소의 변경사항을 로컬로 가져오는 기능을 통해 협업이 가능합니다.
V
이러한 기능들을 사용하여 Git을 작업하는 흐름으로 주로 다음과 같은 과정을 따릅니다.
Workspace에 파일을 생성하고 작업한 파일을
Add하여 스테이징 영역에 추가한 후,
Commit하여 로컬 저장소에 영구적으로 기록합니다.
새로운 기능을 추가하거나 수정할 때 새로운 브랜치를 생성하여 작업하고
완료된 작업을 다른 브랜치와 병합하거나 원격저장소에 업로드하여 협업을 진행합니다. 
Git은 이러한 기능과 작업 흐름으로 개발자들이 프로젝트를 보다 효과적으로 
관리하고 협업하는데 도움을 줍니다.
V
그렇다면 github란 무엇일까요?
V
깃허브란 git으로 관리되는 프로젝트들을 저장하고 관리할 수 있도록 도와주는 플랫폼으로
코드저장,버전관리,협업,이슈 트레킹,웹 호스팅 등의 기능을 제공하며
깃허브는 깃의 원격저장소 역할을 합니다.
마치 우리가 컴퓨터의 폴더를 클라우드와 같은 온라인 상의 공간에 올려둘 수 있는 저장공간이라고 생각하시면 됩니다.
V
그렇다면 git과 github의 연관성에 대해 보도록 하겠습니다.
Git이 분산버전관리시스템으로 앞서 발표한 내용을 보면,
소스코드의 변경사항을 추적하고 관리하는 도구로써 역할을 합니다.
반면, github는 git 저장소를 호스팅하고 협업을 위한 플랫폼을 서비스합니다.
Github는 git의 원격저장소 호스팅 서비스 중 하나로, 
Git으로 관리되는 프로젝트를 온라인으로 저장하고 관리할 수 있도록 도와줍니다.
Git은 로컬컴퓨터에서 명령어를 통해 상호작용이되고,
Girhub는 이러한 git 저장소를 웹기반으로 여러 사용자가 동시에
작업하고 협업할 수 있는 환경을 제공합니다.
V
Git을 기반으로 하는 github 역시 git의 기능들과 유사한 모습을 보입니다.
V
Git을 기반으로 프로젝트 소스 코드와 변경 사항을 추적하고 관리할 수 있습니다.
다수의 개발자가 동시에 같은 프로젝트를 개발 할 수 있도록 도와주고
소스코드를 공유하며 변경사항을 확인하고 병합하는 과정아 간편하게 이루어집니다.
프로젝트를 관리하며 버그 리포트, 기능 요청 등의 이슈를 등록하고 추적할 수 있습니다,
소스코드 변경을 다른 사람의 리뷰와 병합을 요청하는 풀리퀘스트 기능이 있습니다.
풀리퀘스트를 생성하면 
변경 사항을 포함한 코드의 복사본을 기존 코드와 비교하여 보여주며, 
이를 확인하고 댓글을 달거나 변경 사항을 제안할 수 있습니다.
Github는 프로젝트의 소스 코드를 온라인으로 호스팅하여 
누구나 쉽게 접근할 수 있도록 하고
소프트웨어의 라이선스와 관련된 정보를 제공하여
다른 사용자들이 소스코드의 사용조건을 파악할 수 있도록 기능을 제공합니다.
GitHub Actions 이라는 기능을 통해 테스트, 빌드, 배포 등의 작업을 자동화할 수 있고,
개인 개발 프로젝트를 관리하거나 다양한 오픈소스 프로젝트에 기여할 수 있는 플랫폼으로 사용됩니다.
V
물론 git과 github에도 다른 단점들이 존재하지만
현대 소프트웨어 개발에서 중요한 역할을 수행하기에 현대 개발자들에게 
필수적이며 보다 효율적인 개발과 협업을 도와줍니다.
Git은 안정성과 버전관리의 힘을 제공하고,
Github는 이러한 기능을 웹상에서 협업과 공유가 가능하게 해줍니다.
Git 과 github의 이용방법에 대해 연구를 통해 
앞으로 진행할 우리의 프로젝트를 더 나은 방향으로 이끌어 나가는 토대로 사용해야 합니다.
V
이상 발표를 마치겠습니다.
감사합니다.
